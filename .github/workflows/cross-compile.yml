name: Cross Deploy

on:
  push:
    branches:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"

permissions:
  contents: write

jobs:
  build-and-upload:
    name: Build and upload
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - build: windows-gnu
            os: windows-latest
            target: x86_64-pc-windows-msvc
            php-versions: '8.3'
            
          - build: linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            php-versions: '8.3'

          - build: macos
            os: macos-latest
            target: x86_64-apple-darwin
            php-versions: '8.3'
          

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get the release version from the tag
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Install Rust
        # Or @stable if you want
        uses: dtolnay/rust-toolchain@nightly
        with:
          targets: ${{ matrix.target }}
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
      
      - name: Add msbuild to PATH
        if: matrix.os == 'windows-latest'
        uses: microsoft/setup-msbuild@v2

      - name: Setup PHP development environment for Windows
        if: matrix.os == 'windows-latest'
        run: |
          # Configure
          $php_dir = 'C:\tools\php'
          $arch    = 'x64'    
          $ts      = $False   
          $version = '8.3'    

          # Install
          New-Item -Path $php_dir -Type Directory -Force
          Invoke-WebRequest -UseBasicParsing -Uri https://github.com/shivammathur/php-builder-windows/releases/latest/download/Get-Php.ps1 -OutFile $php_dir\Get-Php.ps1
          . $php_dir\Get-Php.ps1 -Architecture $arch -ThreadSafe $ts -Path $php_dir -Version $version

          # Test
          . $php_dir\php -v

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --verbose --release --target ${{ matrix.target }}

      - name: Build archive
        shell: bash
        run: |
          # Replace with the name of your binary
          binary_name="libsql_php"

          dirname="$binary_name-${{ env.VERSION }}-${{ matrix.target }}"
          mkdir "$dirname"
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
              mv "target/${{ matrix.target }}/release/$binary_name.dll" "$dirname"
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
              mv "target/${{ matrix.target }}/release/lib$binary_name.dylib" "$dirname"
          else
              mv "target/${{ matrix.target }}/release/lib$binary_name.so" "$dirname"
          fi

          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a "$dirname.zip" "$dirname"
            echo "ASSET=$dirname.zip" >> $GITHUB_ENV
          else
            tar -czf "$dirname.tar.gz" "$dirname"
            echo "ASSET=$dirname.tar.gz" >> $GITHUB_ENV
          fi

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ env.ASSET }}
