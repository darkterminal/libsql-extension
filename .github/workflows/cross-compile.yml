name: Cross Deploy

on:
  push:
    branches:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"

permissions:
  contents: write

jobs:
  build-and-upload:
    name: Build and upload
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - build: windows-gnu
            os: windows-latest
            target: x86_64-pc-windows-msvc
            php-versions: '8.3'
            
          - build: linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            php-versions: '8.3'

          - build: macos
            os: macos-latest
            target: x86_64-apple-darwin
            php-versions: '8.3'
          

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get the release version from the tag
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Install Rust
        # Or @stable if you want
        uses: dtolnay/rust-toolchain@nightly
        with:
          targets: ${{ matrix.target }}
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
      
      - name: Install LLVM and Clang
        if: matrix.os == 'windows-latest'
        uses: KyleMayes/install-llvm-action@v2
        with:
          version: "10.0"
      
      - name: Add msbuild to PATH
        if: matrix.os == 'windows-latest'
        uses: microsoft/setup-msbuild@v2

      - name: Setup PHP development environment for Windows
        if: matrix.os == 'windows-latest'
        run: |
          # Download and extract PHP development files
          Invoke-WebRequest -Uri "https://github.com/shivammathur/php-builder-windows/releases/download/php8.3/php-devel-pack-8.3.7-dev-nts-Win32-vs16-x64.zip" -OutFile "php-devel.zip"
          Expand-Archive -Path "php-devel.zip" -DestinationPath "C:\php-devel"
          # Set environment variables for include and lib directories
          echo "INCLUDE=C:\php-devel\include;${env:INCLUDE}" | Out-File -Append -FilePath $env:GITHUB_ENV
          echo "LIB=C:\php-devel\lib;${env:LIB}" | Out-File -Append -FilePath $env:GITHUB_ENV
          echo "INCLUDE=C:\Program Files (x86)\Windows Kits\10\Include\10.0.${env:GITHUB_WINDOWS_SDK_VERSION}\ucrt;${env:INCLUDE}" | Out-File -Append -FilePath $env:GITHUB_ENV

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --verbose --release --target ${{ matrix.target }}

      - name: Build archive
        shell: bash
        run: |
          # Replace with the name of your binary
          binary_name="libsql_php"

          dirname="$binary_name-${{ env.VERSION }}-${{ matrix.target }}"
          mkdir "$dirname"
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
              mv "target/${{ matrix.target }}/release/$binary_name.dll" "$dirname"
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
              mv "target/${{ matrix.target }}/release/lib$binary_name.dylib" "$dirname"
          else
              mv "target/${{ matrix.target }}/release/lib$binary_name.so" "$dirname"
          fi

          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a "$dirname.zip" "$dirname"
            echo "ASSET=$dirname.zip" >> $GITHUB_ENV
          else
            tar -czf "$dirname.tar.gz" "$dirname"
            echo "ASSET=$dirname.tar.gz" >> $GITHUB_ENV
          fi

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ env.ASSET }}
